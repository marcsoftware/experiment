Hibernate
The Hibernate framework is a ORM (Object-Relational Mapping) implementation which is built around JDBC.

ORM refers to the long-standing problem of setting up a relationship between a program's objects and rows in a SQL table.

class Customer {
    int id;
    String name;
    List<Account>;
}
Create Table Customer(
    id integer primary key,
    name varchar2(50),
    account_id foreign key references Account(id)
    --The above is an issue for mapping
);
Map our Java objects to database entities through Hibernate, built on top of JDBC, 
which will abstract for us all the persistence and transactions that we would normally do ourselves.
 Hibernate can use interfaces to abstract several different database connections, but can also generate SQL.

Configuration creates session factories through a specified configuration file or class
SessionFactory is a singleton which generates session objects using a factory design pattern.


Query is used to write complex CRUD operations using HQL (Hibernate Query Language)
Criteria is for programmatically writing Select queries


Transaction is an interface for managing ACID-complient transactions
Transaction tx = session.beginTransation(); //some inserts here tx.commit();

Mapping with JPA Annotations

By default, no transitive persistence or cascading of state in Hibernate objects with multiplicity relationships
No default cascading of state or persistence by reachability
Set up cascade types such as all, none, delete-orphan, etc, in mapping document or in annotation to establish parent/child lifecycle tables,
 where child lifespan is bounded by parent's lifespan
Lazy/Eager Fetching
Eager grabs all information, including associated objects, immediately
Lazy grabs data only when needed, and creates a proxy in place of associated objects until then
Proxies can be filled as long as session is open, otherwise a LazyInitializationException is thrown after session closes
Ex: @ManyToOne(fetch=FetchType.LAZY)
Object States
Transient
Just Instantiated with 'new'
Not associated with a session
No database representation
Persistent
Has database representation and an identifier
Within scope of a session
Any changes made in Java will be detected by Hibernate and reflected in database
Detached
Was in a persistent state, but then the session ended
Automatic Dirty Checking
When connection closes, Hibernate checks for changes in persistent objects and puts all objects in Detached state
Eager vs Lazy Hibernate session CRUD
Get

Immediately (Eagerly) retrieve object from DB
Null if object does not exist
Load

Retrieves a proxy (Lazily) which is filled only when used
Accessible while session is open
Save

Returns generated PK
Immediately (Eagerly) inserts regardless of transaction
Persist

Void return type
Only inserts during a transaction
Update

Updates object in DB
Brings transient object to persistent state
Merge

Checks if object exists
Makes persistent object if it doesn't
Copies data into new persistent object
SaveOrUpdate

Universal tool for persistent objects
If object exists, it will update
If not, it will create
Caching
Level 1

Session scope
Enabled by default (no config)
Session.evict() removes one object
Session.clear() removes entire cache
Session.contains() returns t/f if cached object is available
Level 2

SessionFactory scope
Not default behavior (must configure w/ 3rd party library like Ehcache)
Strategies/Use cases:
Read_Only – good for app config, things that are never updated
Read_Write – for objects to be updated, only aware of changes through hibernate