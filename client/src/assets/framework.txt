spring is a modular framework.
spring is built on an IOC container.
               ?what is IOC container ?

Spring has core IoC Container, 
the IOC  manages object lifecycles and automatic dependency injection.

An object managed by the container, known as a Spring Bean,
...is instantiated, deployed when requested, and destroyed automatically.
   
Any dependencies required by the bean are also injected through constructor arguments, 
arguments to a factory method, or properties set on the object instance after its construction. 
    

The IoC Container is known today as the Application Context, and originally called the Bean Factory.

The goal of an IoC Container is to decouple execution from configuration (business logic from factory logic). 

By separating these concerns, an application's code base becomes more modular, loosely coupled, 
with less focus on how code will be implemented and more on its business logic.

The phrase 'inversion of control' refers to this process of configuring dependencies for a bean,
 rather than the bean controlling the process for its own dependencies.

                   ? modules used ? 

The IoC container is made up of the spring-core, spring-beans, and spring-context modules,



             ?  is BeanFactory different from  ApplicationContext ?


The Bean Factory was the original interface for Spring,
and has been replaced by the more capable Application Context. 
 
Bean Factory was a sophisticated implementation of the factory design pattern which lazily and programmatically instantiate beans as singletons.

Application Context is an extension of the Bean Factory,
 eagerly instantiating beans and capable of defining several different scopes besides singleton.

                  ? what is bean wireing ?

By far the most popular and easiest method is 'Autowiring' where Spring will figure out a dependency 'automagically' based on its Stereotype annotation.

                  ? what is AOP ?

In OOP, the unit of modularity is the object or class, but it doesn't resolve some issues of tightly coupled code that is only tangentially related to your business logic:

cross cutting concerns:
-Logging -Exception Handling -Configurations
-Security/Validation -Transactions -Tests



In AOP, the unit of modularity is the aspect, otherwise known as a cross-cutting concern. 
These are code snippets or statements that can be injected into an application which is decoupled from the business logic.

           ???? SPRING AOP ????????

With Spring we can define aspects as a class that has several methods which will act as interceptors to other methods in our application.
 These interceptors are known as advices which will take certain types of actions.

Advice: Action to be taken at Join Point
Join Point: Method where code will be injected
Pointcut: expression which specifies join points where advices will be applied